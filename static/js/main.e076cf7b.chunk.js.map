{"version":3,"sources":["components/input.js","App.js","serviceWorker.js","index.js"],"names":["Input","style","fontFamily","concat","this","props","fontSize","fontWeight","color","fontStyle","italic","react_default","a","createElement","type","onChange","value","text","className","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","defaultState","handleItalicChange","event","setState","target","checked","setUrlParam","handleFontWeightChange","handleFontSizeChange","handleFontFamilyChange","handleColorChange","handleTextChange","handleResetButtonClick","objectSpread","window","history","pushState","newurl","location","protocol","host","pathname","path","urlParams","URLSearchParams","search","state","has","get","Number","bind","assertThisInitialized","key","search_params","set","toString","components_input","step","min","max","onClick","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e076cf7b.chunk.js","sourcesContent":["import React from \"react\";\nimport './input.css';\n\nclass Input extends React.Component {\n  render() {\n    let style = {\n      fontFamily: `${this.props.fontFamily}, sans-serif`,\n      fontSize: this.props.fontSize,\n      fontWeight: this.props.fontWeight,\n      color: this.props.color,\n      fontStyle: this.props.italic ? 'italic' : 'normal'\n    }\n\n    return (\n      <input type=\"text\" onChange={this.props.onChange} value={this.props.text} style={style} className=\"textInput\"></input>\n    )\n  }\n}\n\nexport default Input;","import React from 'react';\nimport './App.css';\nimport Input from './components/input';\n\nclass App extends React.Component {\n  defaultState = {\n    italic:     false,\n    fontWeight: 500,\n    fontSize:   24,\n    fontFamily: \"Roboto\",\n    color:      \"#000000\",\n    text:       \"write something\"\n  }\n\n  constructor(props) {\n    super(props);\n\n    let urlParams = new URLSearchParams(window.location.search);\n\n    this.state = {\n      italic:     urlParams.has('italic')     ? urlParams.get('italic') === 'true'  : this.defaultState.italic,\n      fontWeight: urlParams.has('fontWeight') ? Number(urlParams.get('fontWeight')) : this.defaultState.fontWeight,\n      fontSize:   urlParams.has('fontSize')   ? Number(urlParams.get('fontSize'))   : this.defaultState.fontSize,\n      fontFamily: urlParams.has('fontFamily') ? urlParams.get('fontFamily')         : this.defaultState.fontFamily,\n      color:      urlParams.has('color')      ? urlParams.get('color')              : this.defaultState.color,\n      text:       urlParams.has('text')       ? urlParams.get('text')               : this.defaultState.text\n    }\n\n    this.handleItalicChange     = this.handleItalicChange.bind(this);\n    this.handleFontWeightChange = this.handleFontWeightChange.bind(this);\n    this.handleFontSizeChange   = this.handleFontSizeChange.bind(this);\n    this.handleFontFamilyChange = this.handleFontFamilyChange.bind(this);\n    this.handleColorChange      = this.handleColorChange.bind(this);\n    this.handleTextChange       = this.handleTextChange.bind(this);\n  }\n\n  handleItalicChange     = event => { \n    this.setState({italic: event.target.checked});\n    this.setUrlParam(\"italic\", event.target.checked);\n  }\n\n  handleFontWeightChange = event => {\n    this.setState({fontWeight: event.target.value});\n    this.setUrlParam(\"fontWeight\", event.target.value);\n  }\n\n  handleFontSizeChange   = event => {\n    this.setState({fontSize: event.target.value});\n    this.setUrlParam(\"fontSize\", event.target.value);\n  }\n\n  handleFontFamilyChange = event => {\n    this.setState({fontFamily: event.target.value});\n    this.setUrlParam(\"fontFamily\", event.target.value);\n  }\n  \n  handleColorChange      = event => {\n    this.setState({color: event.target.value})\n    this.setUrlParam(\"color\", event.target.value);\n  }\n  \n  handleTextChange = event => {\n    this.setState({text: event.target.value});\n    this.setUrlParam(\"text\", event.target.value);\n  }\n\n  handleResetButtonClick = () => {\n    this.setState({...this.defaultState});\n    if (window.history.pushState) {\n      let newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname;\n      window.history.pushState({path:newurl}, '' , newurl);\n    }\n  }\n\n  setUrlParam(key, value) {\n    let search_params = new URLSearchParams(window.location.search); \n    search_params.set(key, value);\n    if (window.history.pushState) {\n      var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + \"?\" + search_params.toString();\n      window.history.pushState({path:newurl}, '', newurl);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Input\n          italic={this.state.italic}\n          fontWeight={this.state.fontWeight}\n          fontSize={this.state.fontSize + \"pt\"}\n          fontFamily={this.state.fontFamily}\n          color={this.state.color}\n          onChange={this.handleTextChange}\n          text={this.state.text}\n        ></Input>\n        <div className=\"controls\">\n          <label>\n            Italic\n            <input className=\"italicCheckbox\"  type=\"checkbox\" checked={this.state.italic} onChange={this.handleItalicChange}></input>\n          </label>\n          <label>\n            Font weight:\n            <input className=\"fontWeightInput\" type=\"number\" step=\"100\" min=\"100\" max=\"900\" value={this.state.fontWeight} onChange={this.handleFontWeightChange}></input>\n          </label>\n          <label>\n            Font size:\n            <input className=\"fontSizeInput\"   type=\"number\" step=\"1\" min=\"8\" max=\"128\" value={this.state.fontSize} onChange={this.handleFontSizeChange}></input>\n          </label>\n          <label>\n            Font family:\n            <select className=\"fontFamilyInput\" value={this.state.fontFamily} onChange={this.handleFontFamilyChange}>\n              <option>Open Sans</option>\n              <option>Lato</option>\n              <option>Roboto</option>\n              <option>Dancing Script</option>\n              <option>Sacramento</option>\n            </select>\n          </label>\n          <label>\n            Color\n            <input className=\"colorInput\"      type=\"color\" value={this.state.color} onChange={this.handleColorChange}></input>\n          </label>\n          <button onClick={this.handleResetButtonClick}>Reset</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}